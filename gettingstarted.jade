extends layout

block vars
  - var thisPage = 'gettingstarted'

block content

  .jumbotron(style='background: url("images/header-1-500.jpg"); background-size:cover;')
    .container(style='padding-top: 70px').feature-container
      h1 Getting Started

      p Try out the API Portal in the following simple steps.
  .container

    br
    br
    br
    br

    h1 WORK IN PROGRESS - THIS WILL CURRENTLY NOT (YET) WORK!

    br
    br
    br
    br

    h2 Introduction

    .row
      .col-md-8
        p.
          This introduction to the API Portal we provide will guide you to deploy an API Portal
          like the one we keep for demo purposes at 
          <a href='https://wicked-demo.haufe.io' target='_blank'>wicked-demo.haufe.io</a>.
        p.
          The wicked API Portal is designed to run within <a href='http://docker.io' target='_blank'><code>docker</code></a>.
          While it would  be perfectly possible to run the API Portal without docker, we at Haufe firmly believe
          that it is not worth the effort. We have designed a deployment you can just use off the shelf,
          including guidelines on how to 

        ul
          li Deploy
          li Update
          li and Operate
      .col-md-4(style='text-align:right')
        a(href='https://docker.com' target='_blank')
          img(src='https://www.docker.com/sites/all/themes/docker/assets/images/Logo-Docker.svg' width='250')

    p.
      your API Portal and the API Gateway (<a href='https://getkong.org' target='_blank'>Mashape Kong</a>) which is used to proxy the APIs.
    p &nbsp;

  div(style='background-color:#eee')
    .container
      h2 Step 1: Prerequisites - Docker

      .row
        .col-md-8
          p.
            The only prerequisites for this getting started guide is that you have access to a the docker command
            line and a Docker host. If you haven't already installed Docker, go ahead and
            <a href='https://docker.com' target='_blank'>do that first</a>.
            It will work both on Windows and Mac OS X machines without problems.

          p.
            The API Portal will - for evaluation purposes - happily run on your local machine, or on any docker
            host which you have set up <code>docker-machine</code> to talk to. Make sure you are using version
            greater than or equal to 1.11 when deploying the API Portal, as we are using features of Docker which
            are not available before that. Also make sure you have a recent 
            <a href='https://www.docker.com/products/docker-compose' target='_blank'><code>docker-compose</code></a>
            installed; if you haven't, click the link above and get it before proceeding. If you are using the
            Docker Toolbox for Mac OS X or Windows, <code>docker-compose</code> will already be installed on your machine.

          a(href='https://docker.com' target='_blank').btn.btn-primary.btn-lg Get Docker &raquo;

        .col-md-4(style='text-align:right;')
          a(href='https://www.docker.com/products/docker-compose' target='_blank')
            img(src='https://www.docker.com/sites/default/files/Compose.png' style='width:250px;')
          br
          br

  div(style='background-color: #fff;')
    .container    
      h2 Step 2: Clone the Sample Deployment Repository

      .row
        .col-md-8
          p.
            Deploying the API Portal is equivalent to running a <code>docker-compose.yml</code> file. Get a sample
            file from the Haufe-Lexware Github Repository. 

          pre.
            $ git clone https://github.com/Haufe-Lexware/wicked.sample.deploy
            Cloning into 'wicked.sample-deploy'...
            ...
            $ cd wicked.sample-deploy

          p.
            The make sure you have a docker host at hand you can deploy to. If you have just installed docker on
            your local machine, this will be the case, and you just have to call either the "Docker Quickstart Terminal"
            or - with more recent installations - simply the Terminal. Check that everything works:

          pre.
            $ docker --version
            Docker version 1.11.2, build b9f10c9
            $ docker ps
            CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES
            $ docker-compose --version
            docker-compose version 1.7.1, build 0a9ab35
            $
          
          p &nbsp;
        .col-md-4(style='text-align:right')
          a(href='https://github.com/Haufe-Lexware/wicked.sample.deploy' target='_blank')
            img(src='https://assets-cdn.github.com/images/modules/logos_page/Octocat.png' style='width:250px;')

  div(style='background-color:#eee')
    .container
      h2 Step 3: Creating SSL Certificates

      .row
        .col-md-8
          p.
            For our sample deployment, we will create self-signed SSL certificates which the Portal requires to run
            using TLS (<code>https</code>). If you are on Linux or Mac OS X, chances are good you already have
            OpenSSL installed, on Windows you will need to download and install first.
          p
            a(href='http://slproweb.com/products/Win32OpenSSL.html' target='_blank').btn.btn-default Get OpenSSL for Windows &raquo;
          
          p.
            Issue the following commands to create a directory for the needed key and certificate files:

          pre.
            $ mkdir certs
            $ cd certs
            $ mkdir portal.local
            $ mkdir api.portal.local
          
          p.
            Now we will issue the OpenSSL command which will create the self signed certificate for the Portal. OpenSSL
            will ask a number of questions, the most important one is the one for the FQDN (Fully Qualified Domain Name).
            Use the FQDN name <code>portal.local</code> for this local testing deployment.
          
          pre.
            $ openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout portal.local/key.pem -out portal.local/cert.pem
            ...
          
          p.
            Repeat the process for the API Gateway certificate (which is different from the Portal UI certificate):
          
          pre.
            $ openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout api.portal.local/key.pem -out api.portal.local/cert.pem
            ...

          p &nbsp;
        
  div(style='background-color: #fff;')
    .container    
      h2 Step 4: Create <code>/etc/hosts</code> entries

      .row
        .col-md-8
          p.
            In a first step, you need to find out which IP address your docker host is running on. If you are using the Docker
            Toolbox on Windows or Mac (not the Beta), this will be the output of 
            <code>docker-machine ip default</code>. If you are using a different docker host, the IP address you need for
            the next step is either the IP address of your docker host (<code>docker-machine ip (name of your machine)</code>),
            or the DNS name of that machine. If you are using the <strong>Docker Beta</strong>, the IP address you need is
            the IP address of your own computer; do not use <code>localhost</code>, but the fully qualified IP address or
            DNS name of your computer.  
          p.
            Open up your <code>/etc/hosts</code> file in an editor (this step will be different on Linux, Mac OS X and
            Windows, please google if unclear) and add the following two lines:

          pre.
            (the IP address from above)   portal.local
            (the IP address from above)   api.portal.local
          
          p.
            Check that you can ping your machine using both DNS names:

          pre.
            $ ping portal.local
            PING portal.local (192.168.99.100): 56 data bytes
            64 bytes from 192.168.99.100: icmp_seq=0 ttl=64 time=0.098 ms
            ...
            $ ping api.portal.local
            PING api.portal.local (192.168.99.100): 56 data bytes
            64 bytes from 192.168.99.100: icmp_seq=0 ttl=64 time=0.098 ms
            ...

          p.
            <strong>Important Note:</strong> We only need to do this in order to access the machine using DNS names. If you
            can create real DNS names for your IP address, this will work as well. In that case, replace <code>portal.local</code>
            and <code>api.portal.local</code> with the FQDN you provide. If you use the <code>/etc/hosts</code> files, it is
            obvious that everybody who wants to try out the API Portal also needs these entries to be able to access it. For local
            testing, it will do like described above though.

          p &nbsp;

  div(style='background-color:#eee')
    .container
      h2 Step 5: Deploy

      .row
        .col-md-8
          p.
            We are now all set to deploy the API Portal.
          pre.
            $ docker-compose up
            $ docker ps
          
          p.
            This will take a little while, mostly because docker has to download the container images used for the portal.
            Depending on your internet connection speed, you can expect this to take from two to ten minutes (the images
            are around 1.5 GB in size in total).

          p &nbsp;

  div(style='background-color:#fff')
    .container
      h2 Step 6: Log in

      .row
        .col-md-8
          p.
            Navigate to your API Portal at <a href='https://portal.local' target='_blank'><code>https://portal.local</code></a>
            and start playing around. The sample configuration has a preconfigured admin user with the following credentials:
          ul
            li <strong>User email:</strong> <code>admin@foo.com</code>
            li <strong>Password:</strong> <code>wicked</code>

          p &nbsp;

          .panel.panel-default
            .panel-heading
              | Screenshot
            .panel-body(style='text-align:center')
              img(src='images/screenshot-640.png').img-responsive
        .col-md-4(style='text-align:right')
          img(src='images/logo-200.png')


