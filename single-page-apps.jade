extends layout

block vars
  - var thisPage = 'single-page-apps'

block content
  .jumbotron(style='background: url("images/header-2-500.jpg"); background-size:cover;')
    .container(style='padding-top: 70px').feature-container
      h1 Single Page Applications

      p Securing Single Page Apps using the OAuth2 Implicit Grant Flow

  .container.pad20
    .row
      .col-md-8
        h4 Use Case Description
        p.
          Modern Single Page Applications are typically powered by a backend REST API, which needs to be
          secured against misuse. As the application lives entirely in the browser (user agent) of the
          end user, and does typically not have a server session, traditional approaches for this (server
          side sessions) are not desired.
        p.
          In order to decouple the backend API and frontend application, an API Gateway can be put in place
          to implement the OAuth 2.0 Implicit Grant Flow, which is the recommended way of solving giving
          a "public" client (as opposed to a <a href="enduser-to-api.html">&quot;confidential&quot; client</a>)
          access to an API.

        img(src="images/uc-single-page-app.png").center-block

  .grey
    .container.pad20
      .row
        .col-md-4
          p &nbsp;
        .col-md-8
          h4 Development Time Workflow

          p.
            For development time, the following workflow is typical:
          ol
            li The developer signs up for the API Portal and registers the single page application in the portal; the developer specifies exactly under which URL the SPA will be reachable from (tick the "OAuth 2.0 Redirect URI" check box for the application)
            li By creating a subscription to the Backend API, the developer obtains client credentials for the single page application, a client ID and a client secret; for this use case, only the client ID is significant
            li The developer incorporates the client ID into the single page application:
              ul
                li If the SPA does not have a valid access token (e.g. in the HTML5 local storage), redirect to the Authorization Server (the URL of which is stated on the API page in the API Portal), specifying which application is calling by passing on the <code>client_id=...</code> and <code>grant_type=implicit</code> in the redirect parameters
                li Expect to get called back being passed an access token in the fragment of the URL of your own application (e.g. `https://my.spa.com/#access_token=abc928987dffabe9273`)
          
          p.
            For the OAuth2.0 Implicit Flow Grant, it is not necessary and actually "forbidden" to also incorporate the client
            secret into the single page app; in case the API also supports the client credentials flow, this would enable attackers to
            reverse engineer the app and extract the credentials. The client ID helps the authorization server to know exactly to
            which URL it will deliver the access token.
    
  .container.pad20
    .row
      .col-md-8
        h4 Runtime Workflow

        p.
          To illustrate the runtime flow of such an authentication and authorization process using the OAuth 2.0
          Implicit Flow Grant, see this picture:

        img(src="images/oauth2-implicit-flow.png").center-block

        p.
          Usually, the SPA will try to store an access token inside its local storage; in case there is none to use, or
          if it has expired, the SPA should redirect to the Authorization Server to get a new token. How the Authorization
          Server decides whether or not to issue a (new) token to the single page application is an implemnetation detail
          and inherently part of the business logic of your single page application.

        p.
          The Authorization normally delegates finding the identity of the end user (authenticate the user) to an external
          Identity Provider, which can be most anything, e.g. a SAML SSO IdP, Google, Github or any other Provider which allows
          for integrations.

  .grey
    .container.pad20
      .row
        .col-md-4
          p &nbsp;
        .col-md-8
          h4 How do I implement this with wicked?

          p.
            wicked.haufe.io supports the OAuth 2.0 Implicit Flow, even though not entirely out of the box: You will need
            to provide an Authorization Server on your own.
          p.
            To illustrate how such Authorization Servers can be implemented, there are two sample projects assosicated
            with wicked which integrate with different Identity Providers:

          ul
            li The project <a href="https://github.com/Haufe-Lexware/wicked.auth-passport">wicked.auth-passport</a> leverages the node.js PassportJS library to provide the following social logins:
              ul
                li Google (Plus) login
                li Github login
                li Facebook login, and
                li Twitter login
            li In <a href="https://github.com/Haufe-Lexware/wicked.auth-saml">wicked.auth-saml</a> you will find an Authorization Server which can be used to integrate with SAML type Identity Providers; this Authorization Server will let you federate a SAML SSO session to an OAuth 2.0 Implicit Flow, which can be really useful if you need to integrate in Enterprise Scenarios.
          
          p.
            Both sample projects will allow some parameterizing out of the box, but both do not provide any kind of additional
            authorization -- if the user was able to authenticate with the desired identity provider, this is considered enough
            to also be <b>authorized</b>.
          p.
            For wicked.auth-saml, you will find a stub in <code>authorize.js</code> which shows where to put custom authorization code,
            in case you need or want that.
    